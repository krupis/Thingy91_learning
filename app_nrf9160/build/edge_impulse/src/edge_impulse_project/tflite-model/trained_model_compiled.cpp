/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.03.2023 17:16:26

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 272;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const TfArray<1, float> quant0_scale = { 1, { 0.079635113477706909, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[30] = { 41, 18, -20, 61, -87, 284, -254, -11, 398, -105, 42, -19, 327, 525, -25, -22, 14, 232, 137, -36, -24, 394, 207, -227, 98, -428, 396, 551, 463, -15, };
const TfArray<1, int> tensor_dimension1 = { 1, { 30 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0012635363964363933, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int32_t tensor_data2[15] = { 570, 397, -169, -6, -286, -175, -223, 66, -397, 160, 144, -222, 372, -335, 685, };
const TfArray<1, int> tensor_dimension2 = { 1, { 15 } };
const TfArray<1, float> quant2_scale = { 1, { 0.000950593501329422, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[4] = { 158, -260, -157, 155, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0019050453556701541, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[30*33] = { 
  -20, -5, 14, 18, -29, 2, -38, 8, -28, -27, -79, -15, 22, 6, -4, -5, -5, -17, 5, -11, -37, -73, 27, 32, -5, 10, -1, 0, 29, -1, -7, -1, -19, 
  23, 13, -96, 1, -18, 16, 9, -42, -48, -31, 39, 25, 19, -65, -10, -35, 11, -11, 6, -5, 8, 59, 23, 11, -86, 5, -17, -5, 27, -113, -112, -69, 38, 
  12, 15, 26, 16, 10, -8, 37, 2, 6, 55, 38, 18, 17, 8, -2, 48, -10, 21, -9, 27, 5, 37, -1, -19, 14, 6, -11, 2, -24, 35, 16, 13, 7, 
  -26, 0, 73, 2, 22, 2, 41, 13, -12, -53, -62, -14, 22, 86, -18, 49, 3, 25, -21, -3, -9, -28, -46, 25, 30, -4, -4, 4, -17, -7, 4, 13, -50, 
  0, -20, 62, 10, 8, 18, 6, -17, 10, 9, -29, -16, -3, 22, -9, 6, -8, -6, -17, -29, -6, -39, 7, 3, 41, -7, 15, 4, -16, -30, -16, -16, 5, 
  9, 23, -10, -6, -13, -5, -46, -19, 3, -30, -53, -1, 8, 10, -9, -21, -11, -26, -6, -5, 3, -51, 29, 10, -6, 5, -14, 8, 35, -18, 2, -19, -2, 
  -15, 25, -37, -3, -22, -7, 11, 34, -19, -17, 91, 25, -3, -11, 4, 4, 7, 34, 37, 45, 22, 62, -7, 14, -16, -2, -14, 1, -27, -21, -2, 30, 36, 
  -12, 7, -36, 18, -16, 16, -19, -51, -49, -19, 2, -1, -5, 1, -32, 11, -2, -12, 20, 12, -55, 11, 6, -23, -21, -10, 31, -9, 47, 22, -1, -41, 36, 
  19, 0, -49, 8, -6, -15, -15, -7, 21, 49, 30, 6, 19, -33, -5, -20, -8, -9, 2, 29, 35, 54, 27, -1, -16, -5, 15, -16, 5, -23, -16, -28, 12, 
  -2, 25, 1, 22, 9, -1, 18, -69, -84, -77, 26, 6, 19, 5, 0, 43, 1, 18, -15, -36, -64, -8, -61, 11, -99, 1, -30, -9, -11, -93, -127, -91, 13, 
  -44, -39, -78, 2, -24, -10, 13, -42, -43, -45, -28, -29, 19, -31, 2, -44, 1, -32, -5, -27, -17, -20, 5, 8, -40, 8, 3, 14, 39, -45, -23, -15, 29, 
  54, -11, -68, 11, -39, -6, 5, -19, -11, -17, 61, 33, 14, -50, -7, -31, 15, 12, 30, -4, -45, 45, 21, 20, -22, 10, -11, 6, -8, -34, -30, -22, 23, 
  43, 1, -56, 7, 14, -4, 44, -45, -42, 12, 23, 25, -11, -27, -6, -17, -6, 16, -48, -34, 41, 9, 43, 5, -51, -4, 17, 3, 43, -53, -40, -13, 26, 
  4, -20, 18, 5, 10, 4, -4, -23, -6, -28, -52, 7, 12, -7, -4, -23, -17, -21, -3, 2, -2, -44, 20, 14, 13, -13, -17, 0, 35, -37, -12, -13, 5, 
  15, -25, -19, 14, 29, 6, 36, -1, -4, 15, 96, 12, -6, -8, 13, 24, 10, 42, -3, 7, 11, 58, 12, -27, 0, -21, -1, -17, 1, -2, 9, 14, 26, 
  5, -6, -10, 3, 0, 4, 54, -12, 4, 43, 85, 15, 1, -24, -16, 2, -8, 26, 9, 15, -10, 65, 12, 4, -11, 14, 22, 6, 14, 8, 19, 12, 10, 
  -12, 11, 10, 11, -20, -14, -32, -12, -22, -11, -66, 13, -1, 4, -4, -29, 20, -27, -5, -25, -24, -65, 23, -13, 2, 0, 3, -6, -2, -18, -6, 10, 6, 
  -26, -10, 4, 22, -6, 4, -38, 2, -2, -45, -104, -29, -6, 9, -3, -15, 19, -13, 25, 5, -12, -97, 1, 6, 24, 15, -9, -17, -24, -26, 7, 11, -30, 
  -19, 2, 41, -26, -12, 3, -57, 22, 14, -16, -34, -9, -13, 4, -12, -6, -8, -19, -25, -40, -6, -2, 14, 10, 21, -6, 10, -2, 6, -8, 18, 18, 24, 
  13, 5, 17, 2, 20, 7, 45, -4, 13, 31, 66, 30, 5, 13, 11, 39, 3, 9, 15, 17, -10, 40, 7, 12, 24, 0, -2, -6, -6, 27, 17, 1, -16, 
  15, -36, 2, -4, -4, -8, 45, 18, 40, 53, 63, 19, -2, -46, 0, -48, -9, -43, 12, 6, -38, -37, 6, -8, 4, -25, 16, 13, -2, 5, -4, 15, 9, 
  -2, -3, -21, 13, 16, 20, 17, 19, -21, -24, 13, 6, -3, -4, -16, -8, -4, -3, 7, 34, 46, 8, -27, -28, -10, 20, -11, -15, 2, -21, 1, -3, -7, 
  -24, 22, 54, -1, 4, 5, -24, 37, 13, -17, -112, -7, -26, 28, -2, 0, 4, -25, 40, 13, -12, -83, -23, -11, 17, 1, 2, 12, -19, -3, 11, -18, -101, 
  11, 1, -14, -8, 5, 7, 26, 5, 23, 49, 64, -30, 13, -81, 12, -40, 7, -18, -30, -50, -29, 23, -7, 1, -26, -2, -18, -8, 2, 17, 36, -8, 3, 
  -8, 23, 8, -17, -12, 2, -3, -42, -31, -34, -47, -22, 10, 20, -16, 5, -29, -4, 15, -3, -26, -14, -60, -48, -24, -45, -19, -16, -6, -73, -59, -95, -63, 
  2, -2, -2, 19, 31, 6, 38, 9, 11, 65, 79, 17, 2, 0, -9, 5, 6, 36, 13, 17, 39, 48, -13, -4, 5, -6, 4, -6, -3, 12, -5, 20, 3, 
  4, 9, 4, -8, -23, -12, -63, -6, -20, -43, -101, 0, -5, -3, 21, -3, -2, -30, 1, 5, -21, -66, -2, 4, 19, -12, 9, 17, -4, -4, 7, 13, -6, 
  -31, -20, -12, 12, -41, -1, -6, 50, -6, -42, -62, -40, -24, -5, -1, 5, 0, -2, 51, 20, -10, 20, -15, -14, 18, -4, -9, 9, -23, 38, 25, 18, -16, 
  10, 5, 42, 3, -1, 0, -45, -11, -19, -39, -100, 2, 4, 37, 5, 16, 23, -3, 13, -13, -3, -51, 19, 14, 12, 12, 8, -12, 21, -2, 1, 2, -6, 
  -9, 16, -59, 2, -37, 20, -24, 9, -11, 7, -8, -35, -14, -67, -8, -55, -14, -21, -18, -40, -21, 21, 2, 18, -8, 15, -8, -8, 31, -37, -13, -2, 34, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 30,33 } };
const TfArray<1, float> quant4_scale = { 1, { 0.01586657389998436, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[15*30] = { 
  48, -41, -91, -17, -15, -13, -34, -21, 55, -5, -6, -127, 9, 48, -113, -61, -76, 122, 42, -121, -118, 46, 122, -15, 58, 18, 10, 89, -28, 17, 
  -1, -22, 11, 49, 30, 9, -40, -45, -22, -12, -43, 6, -22, 1, 19, -23, 2, 30, 48, 23, -40, 3, 57, -17, -21, 5, 18, 35, 14, -26, 
  -11, 22, -9, 7, 13, -21, 26, 14, 11, 6, -13, -10, -45, -14, -15, -2, 28, 22, -19, -18, 14, -2, 2, -24, 34, 12, -19, 2, 0, -11, 
  -27, 33, -12, 50, -1, -23, 1, 5, -1, 59, 46, -16, -11, 2, 30, -1, -9, -7, 13, 16, 54, -13, -3, 43, 85, 1, -12, -26, -20, -37, 
  7, 35, -16, -57, -20, 7, 40, 20, -4, 2, 47, 42, 77, 36, 37, 4, 31, -23, -58, 13, 104, -27, -55, 28, -33, 4, 21, -26, -13, 53, 
  5, 35, 2, -54, -18, -3, -4, 7, 4, 3, 55, 23, 32, 26, 20, 6, -10, -10, -76, -8, 103, 4, -66, 27, -21, 10, -1, -14, 11, 16, 
  12, -4, 26, 21, -3, 1, 51, 1, -5, 6, -2, 31, 30, 15, 10, 24, -35, -17, -58, 15, 16, 16, -15, 25, 53, -3, -18, -7, 16, 4, 
  -21, 18, -21, -45, -16, 10, 36, 18, 32, 21, 8, 30, 38, 24, 20, 21, -20, -16, -2, 19, 26, 4, -56, 32, -62, 4, 10, 29, -11, 38, 
  -31, -66, 19, -31, 14, 8, 30, 55, 12, 5, 3, 11, -7, -34, 11, 29, 6, -21, -17, 15, 36, -26, -22, 10, -19, 21, -18, -45, 4, -3, 
  -13, -29, 35, 43, 45, -22, -12, -45, -23, -8, -5, -25, -44, 20, 1, 23, -14, 9, -54, 12, -7, -13, 51, 4, 17, 35, 9, -53, 20, -20, 
  -2, -4, 7, -25, -7, 24, -9, 27, 36, -14, -25, -7, 74, 36, -13, 4, -19, -34, 9, -22, -1, 19, 29, 27, -44, 27, -18, 76, 17, -7, 
  -4, 24, 1, -46, -29, 21, 21, 34, 21, 8, 27, 6, 37, 31, 3, 23, 24, -21, -42, 11, 60, 11, -47, 1, -47, 12, -19, -40, 2, 21, 
  30, -30, 12, 14, 0, 29, -58, -10, -40, -67, -16, 2, -23, 36, -3, -24, 21, 19, 31, 21, -37, 41, 23, -48, 8, -8, 21, 14, 22, -33, 
  -8, -3, 6, 31, 16, -11, 36, 25, -31, 10, -46, 24, -50, -34, 19, 1, -35, -1, -29, 0, 20, -8, -8, 2, 64, 3, -24, -20, 17, -31, 
  8, 16, -34, -8, 2, 22, -27, -4, 68, -38, 46, 20, 75, 45, 20, 23, 8, 8, 47, -20, -39, 19, 10, -7, -25, -26, 20, 60, 32, 39, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 15,30 } };
const TfArray<1, float> quant5_scale = { 1, { 0.014441278763115406, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[4*15] = { 
  48, 11, -1, 4, -80, -75, -79, -5, 0, -15, 23, -77, -19, 12, 28, 
  -25, -5, 25, 30, 2, 4, 21, -16, 28, 29, -36, -9, -25, 40, -50, 
  -75, -42, -21, 8, 31, 21, 8, 11, -37, -87, 27, 18, -32, -28, 38, 
  -127, 29, 25, -59, -8, -2, -4, -36, -36, 26, -22, -18, 18, -9, 5, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 4,15 } };
const TfArray<1, float> quant6_scale = { 1, { 0.021356811746954918, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,30 } };
const TfArray<1, float> quant7_scale = { 1, { 0.065824747085571289, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,15 } };
const TfArray<1, float> quant8_scale = { 1, { 0.089200831949710846, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.48853006958961487, } };
const TfArray<1, int> quant9_zero = { 1, { 42 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,4 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,1 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 33, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant1))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 990, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 450, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension7, 30, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 15, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 16, (TfLiteIntArray*)&tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
